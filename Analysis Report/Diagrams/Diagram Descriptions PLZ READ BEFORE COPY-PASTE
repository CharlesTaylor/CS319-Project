This diagram shows the Use Case Model for a gameplay. The list of commands are as below. The entire gameplay will consist of typing commands into the command-line, some of which extend other commands.
This diagram shows the Use Case Model for logging in. The login operation can either return a success or a fail. The "load game" and "new game" operations follow "login".
This diagram shows the entire structure of classes and their relations. The GameSystem class, as mentioned earlier, is the class that manages all operations related to individual users. It holds an instance of "Parser" which in turn receives a Game instance as parameter. When a new game is to be started, a new instance of Game is generated inside GameSystem. The Parser class can manage one Game object at a time. Every command entered into the terminal is delivered to the Parser object as a string, which is then interpreted in the form of a modification to the Game object. The Game object is the next class in the hierarchy and it can hold instances of several other classes such as Map and Character. Character is further divided into the Player and Non-Player Characters, which are dungeon trolls, grues and other similar creatures the player can combat. As stated earlier, the map of the game will be randomly generated according to a seed. The map will consist of Location instances that can be thought of as coordinates linked to one another. An additional detail here is that these Location instances will represent a two dimensional plane, while some Location instances will be linked to another Location instance that resides on a completely different plane of Locations which can be accessed by "climbing up" or "climbing down" a certain structure, or Thing, inside that particular Location instance, which ultimately imitates a three dimensional environment. Lastly, the aforementioned Thing class represents all objects available in the game, i.e items that can be acquired by the player or other stationary structures such as walls, doors, tables etc. The classes that inherit the Thing class are appropriately titled Item, which is divided further into edibles and inedibles (weapons, treasure, pamphlets etc.) via class attributes; and Furniture, both respectively modeling the previously mentioned objects in the environment.
